service: rl-stats-resources

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  profile: rl-stats
  region: ${opt:region, 'us-east-1'}
  versions: false
  stage: prod # only one instance of this service should be deployed
  endpointType: REGIONAL
  memorySize: 256
  vpc:
    securityGroupIds:
      - ${cf:rl-stats-setup-prod.SecurityGroupId}
    subnetIds:
      - ${cf:rl-stats-setup-prod.PrivateSubNetA}
      - ${cf:rl-stats-setup-prod.PrivateSubNetB}
  environment:
    MONGODB_PASSWORD_DEV: ${ssm:dev-mnrl-db-pass~true}
    MONGODB_HOST_DEV: mnrl-dev-7nmqy.mongodb.net
    MONGODB_USERNAME_DEV: mnrl_stats
    MONGODB_PASSWORD_PROD: ${ssm:prod-mnrl-db-pass~true}
    MONGODB_HOST_PROD: mnrl-7nmqy.mongodb.net
    MONGODB_USERNAME_PROD: mnrl_stats
    ERROR_CHANNEL_ID: '692994579305332806'
    BACKUPS_BUCKET:
      Ref: BackupsBucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - '*'
  stackTags:
    Project: rl-stats
    Role: ${self:service}

layers:
  mongotools:
    package:
      artifact: bin.zip
      name: ${self:provider.stage}-mongotools

package:
  exclude:
    - node_modules/**/aws-sdk/**
    - ./src/**/*.spec.*
    - .eslintrc*
    - .prettierrc*
    - .vscode*
    - README*
    - ./**/__tests__/**
    - temp/**
    - .env

functions:
  plugin-check:
    handler: lambdas/plugin.handler
    name: ${self:service}-plugincheck-${self:provider.stage}
    timeout: 300
    events:
      - http: GET plugin
  plugin-download:
    handler: lambdas/plugin.download
    name: ${self:service}-plugindownload-${self:provider.stage}
    timeout: 300
    events:
      - http:
          cors: true
          method: get
          path: plugin/download
  backup:
    handler: lambdas/backup.handler
    name: ${self:service}-backup-${self:provider.stage}
    timeout: 300
    layers:
      - { Ref: MongotoolsLambdaLayer }
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          enabled: true
          input:
            database: mnrl
  restore:
    handler: lambdas/restore.handler
    name: ${self:service}-restore-${self:provider.stage}
    timeout: 600
    layers:
      - { Ref: MongotoolsLambdaLayer }

resources:
  Resources:
    BackupsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-backups-${self:provider.region}
        LifecycleConfiguration:
          Rules:
            - Status: Enabled
              ExpirationInDays: '30'
  Outputs:
    BackupsBucket:
      Value:
        Ref: BackupsBucket